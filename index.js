(self.webpackChunkjs_capston=self.webpackChunkjs_capston||[]).push([[826],{772:(n,r,e)=>{"use strict";e.d(r,{Z:()=>a});var t=e(537),o=e.n(t),i=e(645),s=e.n(i)()(o());s.push([n.id,'::-webkit-scrollbar {\r\n  width: 7px;\r\n  background-color: var(--grayish-blue);\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background-color: var(--dark-grayish-blue);\r\n}\r\n\r\n:root {\r\n  --orange: hsl(26, 100%, 55%);\r\n  --pale-orange: hsl(25, 100%, 94%);\r\n  --very-dark-blue: hsl(218, 12%, 13%);\r\n  --dark-grayish-blue: hsl(217, 9%, 45%);\r\n  --grayish-blue: hsl(220, 14%, 75%);\r\n  --light-grayish-blue: hsl(223, 64%, 98%);\r\n  --white: hsl(0, 0%, 100%);\r\n  --black: hsl(0, 0%, 0%);\r\n  --fw-400: 500;\r\n  --fw-700: 600;\r\n  --ff: "Barlow Semi Condensed", sans-serif;\r\n  --size-100: 0.25em;\r\n  --size-200: 0.5em;\r\n  --size-300: 1em;\r\n  --size-400: 1.5em;\r\n  --size-500: 2em;\r\n  --size-600: 2.5em;\r\n  --size-700: 3em;\r\n  --size-800: 4em;\r\n  --size-900: 5em;\r\n}\r\n\r\n/* Box sizing rules */\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Remove default margin */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: var(--ff) !important;\r\n}\r\n\r\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\r\nul {\r\n  list-style: none;\r\n}\r\n\r\n/* Set core root defaults */\r\nhtml:focus-within {\r\n  scroll-behavior: smooth;\r\n}\r\n\r\n/* Set core body defaults */\r\nbody {\r\n  min-height: 100vh;\r\n  text-rendering: optimizeSpeed;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* A elements that don\'t have a class get default styles */\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\n/* Make images easier to work with */\r\nimg {\r\n  max-width: 100%;\r\n  display: block;\r\n}\r\n\r\n/* Inherit fonts for inputs and buttons */\r\n\r\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\r\n@media (prefers-reduced-motion: reduce) {\r\n  html:focus-within {\r\n    scroll-behavior: auto;\r\n  }\r\n\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    animation-duration: 0.01ms !important;\r\n    animation-iteration-count: 1 !important;\r\n    transition-duration: 0.01ms !important;\r\n    scroll-behavior: auto !important;\r\n  }\r\n}\r\n\r\n/* --------------------- START UTILITY CLASSES -------------------- */\r\n\r\n/* Text color */\r\n\r\n.text-dark-grayish-blue {\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n/* background colors */\r\n\r\n/* padding utility classes */\r\n\r\n.p-200 {\r\n  padding: var(--size-200);\r\n}\r\n\r\n.p-300 {\r\n  padding: var(--size-300);\r\n}\r\n\r\n.pt-500 {\r\n  padding-top: var(--size-500);\r\n}\r\n\r\n.pb-500 {\r\n  padding-bottom: var(--size-500);\r\n}\r\n\r\n/* margin utility classes */\r\n\r\n.mt-900 {\r\n  margin-top: var(--size-900);\r\n}\r\n\r\n.mr-400 {\r\n  margin-right: var(--size-400);\r\n}\r\n\r\n.ml-400 {\r\n  margin-left: var(--size-400);\r\n}\r\n\r\n.wrapper {\r\n  max-width: 1140px;\r\n  margin-inline: auto;\r\n}\r\n\r\n/* --------------------- END UTILITY CLASSES -------------------- */\r\n\r\n/* --------------------- START COMPONENT STYLES -------------------- */\r\n\r\n/* 1- header section styles */\r\n.main-header {\r\n  border-bottom: 1.5px solid var(--grayish-blue);\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.nav-list {\r\n  display: none;\r\n}\r\n\r\n.nav-menu {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: var(--size-400);\r\n}\r\n\r\n.close-menu,\r\n.menu-icon {\r\n  cursor: pointer;\r\n}\r\n\r\n@media screen and (min-width: 50em) {\r\n  .nav-menu {\r\n    flex-direction: row;\r\n  }\r\n\r\n  .nav-list {\r\n    display: block;\r\n  }\r\n\r\n  .menu-icon {\r\n    display: none;\r\n  }\r\n\r\n  .close-menu {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.open {\r\n  position: fixed;\r\n  inset: 0;\r\n  background-color: rgba(0, 0, 0, 0.615);\r\n}\r\n\r\n.open .nav-menu {\r\n  display: block;\r\n  text-align: left;\r\n  position: fixed;\r\n  width: 240px;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: var(--white);\r\n}\r\n\r\n.open .nav-menu .close-menu {\r\n  margin-bottom: var(--size-700);\r\n}\r\n\r\n.open .nav-menu li {\r\n  padding: var(--size-300);\r\n  padding-block: var(--size-200);\r\n  background-color: var(--white);\r\n}\r\n\r\n.open .nav-menu li a {\r\n  color: var(--very-dark-blue);\r\n  font-weight: var(--fw-700);\r\n}\r\n\r\n/* 2. main page styles */\r\n.item {\r\n  display: inline-block;\r\n  position: relative;\r\n  margin-top: 25px;\r\n  margin-bottom: 10px;\r\n  height: 445px;\r\n  border-radius: 8px;\r\n  box-shadow: 3px 4px 12px 1px rgba(0, 0, 0, 0.3);\r\n  border: 2px solid var(--orange);\r\n}\r\n\r\n.item-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.diamond-container {\r\n  position: absolute;\r\n  margin-top: -20px;\r\n  margin-left: -20px;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.diamond {\r\n  margin-left: 10px;\r\n  margin-top: 10px;\r\n  width: 70px;\r\n  height: 70px;\r\n  background: var(--orange);\r\n  overflow: hidden;\r\n  color: var(--white);\r\n  font-weight: var(--fw-700);\r\n  font-size: 1.25em;\r\n  letter-spacing: -0.5px;\r\n  transform: rotate(45deg);\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.diamond-wrapper {\r\n  margin-top: 50%;\r\n  transform: translateY(-50%);\r\n  text-align: center;\r\n}\r\n\r\n.diamond-content {\r\n  transform: rotate(-45deg);\r\n}\r\n\r\n.content-wrapper {\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  margin-top: 20px;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.img-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 200px;\r\n  margin-top: 80px;\r\n}\r\n\r\n.bg-square {\r\n  position: absolute;\r\n  width: 250px;\r\n  height: 250px;\r\n  border: 12px solid rgba(51, 51, 51, 0.1);\r\n  margin: 0 auto;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.item-img {\r\n  position: absolute;\r\n  display: block;\r\n  width: 200px;\r\n  height: 200px;\r\n  margin: 0 auto;\r\n  margin-top: -20px;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.content-text {\r\n  position: relative;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n\r\n.item-name {\r\n  font-weight: 400;\r\n  font-size: 1em;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n}\r\n\r\n.item-subtext-container {\r\n  width: 70%;\r\n  margin: 0 auto;\r\n  margin-top: 10px;\r\n  font-size: 0.7em;\r\n  letter-spacing: 2.5px;\r\n  text-transform: uppercase;\r\n  color: #bbb;\r\n  text-align: center;\r\n}\r\n\r\n.view-more-btn {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  color: #fff;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  z-index: 100;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.actions,\r\n.like,\r\n.comment {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.like,\r\n.comment {\r\n  gap: var(--size-200);\r\n}\r\n\r\n.like p,\r\n.comment p {\r\n  font-size: 13px;\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n.like img,\r\n.comment img {\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: var(--size-200);\r\n}\r\n\r\n.pagination .page-item {\r\n  color: var(--dark-grayish-blue);\r\n  float: left;\r\n  padding: 8px 16px;\r\n  text-decoration: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination .active {\r\n  background-color: var(--orange);\r\n  color: var(--white);\r\n}\r\n\r\n.pagination .page-item:hover:not(.active) {\r\n  background-color: var(--pale-orange);\r\n}\r\n\r\n.product-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  flex-direction: column;\r\n  gap: var(--size-500);\r\n}\r\n\r\n@media screen and (min-width: 30em) {\r\n  .product-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    flex-direction: column;\r\n    gap: var(--size-500);\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 50em) {\r\n  .product-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    flex-direction: column;\r\n    gap: var(--size-500);\r\n  }\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n/* Footer style */\r\n.footer-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  vertical-align: middle;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .footer-container {\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n/* Popup section */\r\n\r\n.popup-container {\r\n  position: fixed;\r\n  width: 100%;\r\n  inset: 0;\r\n  background-color: rgba(0, 0, 0, 0.679);\r\n  overflow-y: scroll;\r\n  z-index: 100;\r\n}\r\n\r\n.popup-close {\r\n  position: absolute;\r\n  right: var(--size-700);\r\n  top: var(--size-700);\r\n}\r\n\r\n.popup-info {\r\n  position: relative;\r\n  background-color: var(--white);\r\n  max-width: 1000px;\r\n  margin-block: var(--size-500);\r\n  margin-inline: auto;\r\n  border-radius: 8px;\r\n  padding: var(--size-400);\r\n}\r\n\r\n.prod-detail {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .popup-info {\r\n    padding: var(--size-700);\r\n  }\r\n\r\n  .prod-detail {\r\n    flex-direction: row;\r\n    gap: var(--size-900);\r\n  }\r\n}\r\n\r\n.prod-img {\r\n  max-width: 350px;\r\n  border-radius: var(--size-200);\r\n}\r\n\r\n.prod-desc {\r\n  font-size: 16px;\r\n}\r\n\r\n.product-price {\r\n  color: var(--very-dark-blue);\r\n  font-size: 26px;\r\n  font-weight: var(--fw-700);\r\n}\r\n\r\n.prod-comments {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  margin-top: var(--size-500);\r\n  gap: var(--size-500);\r\n  flex: 1;\r\n}\r\n\r\n.prod-comments > * {\r\n  flex: 1;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .prod-comments {\r\n    flex-direction: row;\r\n    gap: var(--size-900);\r\n  }\r\n}\r\n\r\n.comment-list {\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n.border {\r\n  border-top: 2px solid var(--pale-orange);\r\n}\r\n\r\n.comments-container {\r\n  min-height: 50px;\r\n}\r\n\r\n.form-comments {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: var(--size-200);\r\n}\r\n\r\n.submit-comment {\r\n  background-color: var(--orange);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.submit-comment:hover {\r\n  background-color: var(--dark-grayish-blue);\r\n}\r\n\r\n.popup {\r\n  display: block;\r\n}\r\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"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",sourcesContent:['::-webkit-scrollbar {\r\n  width: 7px;\r\n  background-color: var(--grayish-blue);\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background-color: var(--dark-grayish-blue);\r\n}\r\n\r\n:root {\r\n  --orange: hsl(26, 100%, 55%);\r\n  --pale-orange: hsl(25, 100%, 94%);\r\n  --very-dark-blue: hsl(218, 12%, 13%);\r\n  --dark-grayish-blue: hsl(217, 9%, 45%);\r\n  --grayish-blue: hsl(220, 14%, 75%);\r\n  --light-grayish-blue: hsl(223, 64%, 98%);\r\n  --white: hsl(0, 0%, 100%);\r\n  --black: hsl(0, 0%, 0%);\r\n  --fw-400: 500;\r\n  --fw-700: 600;\r\n  --ff: "Barlow Semi Condensed", sans-serif;\r\n  --size-100: 0.25em;\r\n  --size-200: 0.5em;\r\n  --size-300: 1em;\r\n  --size-400: 1.5em;\r\n  --size-500: 2em;\r\n  --size-600: 2.5em;\r\n  --size-700: 3em;\r\n  --size-800: 4em;\r\n  --size-900: 5em;\r\n}\r\n\r\n/* Box sizing rules */\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Remove default margin */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: var(--ff) !important;\r\n}\r\n\r\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\r\nul {\r\n  list-style: none;\r\n}\r\n\r\n/* Set core root defaults */\r\nhtml:focus-within {\r\n  scroll-behavior: smooth;\r\n}\r\n\r\n/* Set core body defaults */\r\nbody {\r\n  min-height: 100vh;\r\n  text-rendering: optimizeSpeed;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* A elements that don\'t have a class get default styles */\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\n/* Make images easier to work with */\r\nimg {\r\n  max-width: 100%;\r\n  display: block;\r\n}\r\n\r\n/* Inherit fonts for inputs and buttons */\r\n\r\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\r\n@media (prefers-reduced-motion: reduce) {\r\n  html:focus-within {\r\n    scroll-behavior: auto;\r\n  }\r\n\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    animation-duration: 0.01ms !important;\r\n    animation-iteration-count: 1 !important;\r\n    transition-duration: 0.01ms !important;\r\n    scroll-behavior: auto !important;\r\n  }\r\n}\r\n\r\n/* --------------------- START UTILITY CLASSES -------------------- */\r\n\r\n/* Text color */\r\n\r\n.text-dark-grayish-blue {\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n/* background colors */\r\n\r\n/* padding utility classes */\r\n\r\n.p-200 {\r\n  padding: var(--size-200);\r\n}\r\n\r\n.p-300 {\r\n  padding: var(--size-300);\r\n}\r\n\r\n.pt-500 {\r\n  padding-top: var(--size-500);\r\n}\r\n\r\n.pb-500 {\r\n  padding-bottom: var(--size-500);\r\n}\r\n\r\n/* margin utility classes */\r\n\r\n.mt-900 {\r\n  margin-top: var(--size-900);\r\n}\r\n\r\n.mr-400 {\r\n  margin-right: var(--size-400);\r\n}\r\n\r\n.ml-400 {\r\n  margin-left: var(--size-400);\r\n}\r\n\r\n.wrapper {\r\n  max-width: 1140px;\r\n  margin-inline: auto;\r\n}\r\n\r\n/* --------------------- END UTILITY CLASSES -------------------- */\r\n\r\n/* --------------------- START COMPONENT STYLES -------------------- */\r\n\r\n/* 1- header section styles */\r\n.main-header {\r\n  border-bottom: 1.5px solid var(--grayish-blue);\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.nav-list {\r\n  display: none;\r\n}\r\n\r\n.nav-menu {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: var(--size-400);\r\n}\r\n\r\n.close-menu,\r\n.menu-icon {\r\n  cursor: pointer;\r\n}\r\n\r\n@media screen and (min-width: 50em) {\r\n  .nav-menu {\r\n    flex-direction: row;\r\n  }\r\n\r\n  .nav-list {\r\n    display: block;\r\n  }\r\n\r\n  .menu-icon {\r\n    display: none;\r\n  }\r\n\r\n  .close-menu {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.open {\r\n  position: fixed;\r\n  inset: 0;\r\n  background-color: rgba(0, 0, 0, 0.615);\r\n}\r\n\r\n.open .nav-menu {\r\n  display: block;\r\n  text-align: left;\r\n  position: fixed;\r\n  width: 240px;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: var(--white);\r\n}\r\n\r\n.open .nav-menu .close-menu {\r\n  margin-bottom: var(--size-700);\r\n}\r\n\r\n.open .nav-menu li {\r\n  padding: var(--size-300);\r\n  padding-block: var(--size-200);\r\n  background-color: var(--white);\r\n}\r\n\r\n.open .nav-menu li a {\r\n  color: var(--very-dark-blue);\r\n  font-weight: var(--fw-700);\r\n}\r\n\r\n/* 2. main page styles */\r\n.item {\r\n  display: inline-block;\r\n  position: relative;\r\n  margin-top: 25px;\r\n  margin-bottom: 10px;\r\n  height: 445px;\r\n  border-radius: 8px;\r\n  box-shadow: 3px 4px 12px 1px rgba(0, 0, 0, 0.3);\r\n  border: 2px solid var(--orange);\r\n}\r\n\r\n.item-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.diamond-container {\r\n  position: absolute;\r\n  margin-top: -20px;\r\n  margin-left: -20px;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.diamond {\r\n  margin-left: 10px;\r\n  margin-top: 10px;\r\n  width: 70px;\r\n  height: 70px;\r\n  background: var(--orange);\r\n  overflow: hidden;\r\n  color: var(--white);\r\n  font-weight: var(--fw-700);\r\n  font-size: 1.25em;\r\n  letter-spacing: -0.5px;\r\n  transform: rotate(45deg);\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.diamond-wrapper {\r\n  margin-top: 50%;\r\n  transform: translateY(-50%);\r\n  text-align: center;\r\n}\r\n\r\n.diamond-content {\r\n  transform: rotate(-45deg);\r\n}\r\n\r\n.content-wrapper {\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  margin-top: 20px;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.img-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 200px;\r\n  margin-top: 80px;\r\n}\r\n\r\n.bg-square {\r\n  position: absolute;\r\n  width: 250px;\r\n  height: 250px;\r\n  border: 12px solid rgba(51, 51, 51, 0.1);\r\n  margin: 0 auto;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.item-img {\r\n  position: absolute;\r\n  display: block;\r\n  width: 200px;\r\n  height: 200px;\r\n  margin: 0 auto;\r\n  margin-top: -20px;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.content-text {\r\n  position: relative;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n\r\n.item-name {\r\n  font-weight: 400;\r\n  font-size: 1em;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n}\r\n\r\n.item-subtext-container {\r\n  width: 70%;\r\n  margin: 0 auto;\r\n  margin-top: 10px;\r\n  font-size: 0.7em;\r\n  letter-spacing: 2.5px;\r\n  text-transform: uppercase;\r\n  color: #bbb;\r\n  text-align: center;\r\n}\r\n\r\n.view-more-btn {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  color: #fff;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  z-index: 100;\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.actions,\r\n.like,\r\n.comment {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.like,\r\n.comment {\r\n  gap: var(--size-200);\r\n}\r\n\r\n.like p,\r\n.comment p {\r\n  font-size: 13px;\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n.like img,\r\n.comment img {\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: var(--size-200);\r\n}\r\n\r\n.pagination .page-item {\r\n  color: var(--dark-grayish-blue);\r\n  float: left;\r\n  padding: 8px 16px;\r\n  text-decoration: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination .active {\r\n  background-color: var(--orange);\r\n  color: var(--white);\r\n}\r\n\r\n.pagination .page-item:hover:not(.active) {\r\n  background-color: var(--pale-orange);\r\n}\r\n\r\n.product-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  flex-direction: column;\r\n  gap: var(--size-500);\r\n}\r\n\r\n@media screen and (min-width: 30em) {\r\n  .product-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    flex-direction: column;\r\n    gap: var(--size-500);\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 50em) {\r\n  .product-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    flex-direction: column;\r\n    gap: var(--size-500);\r\n  }\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n/* Footer style */\r\n.footer-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  vertical-align: middle;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .footer-container {\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n/* Popup section */\r\n\r\n.popup-container {\r\n  position: fixed;\r\n  width: 100%;\r\n  inset: 0;\r\n  background-color: rgba(0, 0, 0, 0.679);\r\n  overflow-y: scroll;\r\n  z-index: 100;\r\n}\r\n\r\n.popup-close {\r\n  position: absolute;\r\n  right: var(--size-700);\r\n  top: var(--size-700);\r\n}\r\n\r\n.popup-info {\r\n  position: relative;\r\n  background-color: var(--white);\r\n  max-width: 1000px;\r\n  margin-block: var(--size-500);\r\n  margin-inline: auto;\r\n  border-radius: 8px;\r\n  padding: var(--size-400);\r\n}\r\n\r\n.prod-detail {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .popup-info {\r\n    padding: var(--size-700);\r\n  }\r\n\r\n  .prod-detail {\r\n    flex-direction: row;\r\n    gap: var(--size-900);\r\n  }\r\n}\r\n\r\n.prod-img {\r\n  max-width: 350px;\r\n  border-radius: var(--size-200);\r\n}\r\n\r\n.prod-desc {\r\n  font-size: 16px;\r\n}\r\n\r\n.product-price {\r\n  color: var(--very-dark-blue);\r\n  font-size: 26px;\r\n  font-weight: var(--fw-700);\r\n}\r\n\r\n.prod-comments {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  margin-top: var(--size-500);\r\n  gap: var(--size-500);\r\n  flex: 1;\r\n}\r\n\r\n.prod-comments > * {\r\n  flex: 1;\r\n}\r\n\r\n@media screen and (min-width: 40em) {\r\n  .prod-comments {\r\n    flex-direction: row;\r\n    gap: var(--size-900);\r\n  }\r\n}\r\n\r\n.comment-list {\r\n  color: var(--dark-grayish-blue);\r\n}\r\n\r\n.border {\r\n  border-top: 2px solid var(--pale-orange);\r\n}\r\n\r\n.comments-container {\r\n  min-height: 50px;\r\n}\r\n\r\n.form-comments {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: var(--size-200);\r\n}\r\n\r\n.submit-comment {\r\n  background-color: var(--orange);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.submit-comment:hover {\r\n  background-color: var(--dark-grayish-blue);\r\n}\r\n\r\n.popup {\r\n  display: block;\r\n}\r\n'],sourceRoot:""}]);const a=s},645:n=>{"use strict";n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(t)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(s[A]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);t&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},537:n=>{"use strict";n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),s=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(s).concat([i]).join("\n")}return[r].join("\n")}},230:n=>{n.exports="object"==typeof self?self.FormData:window.FormData},379:n=>{"use strict";var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var i={},s=[],a=0;a<n.length;a++){var A=n[a],c=t.base?A[0]+t.base:A[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var d=e(u),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==d)r[d].references++,r[d].updater(p);else{var m=o(p,t);t.byIndex=a,r.splice(a,0,{identifier:u,updater:m,references:1})}s.push(u)}return s}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<i.length;s++){var a=e(i[s]);r[a].references--}for(var A=t(n,o),c=0;c<i.length;c++){var l=e(i[c]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}i=A}}},569:n=>{"use strict";var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{"use strict";n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{"use strict";n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{"use strict";n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},502:()=>{const n=document.querySelector(".menu-icon"),r=document.querySelector(".nav-list"),e=document.querySelector(".close-menu");n.addEventListener("click",(n=>{n.target.style.display="none",r.style.display="block",r.classList.add("open")})),e.addEventListener("click",(()=>{n.style.display="block",r.style.display="none"})),window.addEventListener("resize",(()=>{window.innerWidth>800?(n.style.display="none",r.classList.remove("open"),r.style.display="block"):(r.classList.add("open"),n.style.display="block",r.style.display="none")}))},324:(n,r,e)=>{"use strict";var t=e(379),o=e.n(t),i=e(795),s=e.n(i),a=e(569),A=e.n(a),c=e(565),l=e.n(c),u=e(216),d=e.n(u),p=e(589),m=e.n(p),f=e(772),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=A().bind(null,"head"),h.domAPI=s(),h.insertStyleElement=d(),o()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals,e(502);const E=(n,r=0,e=0)=>`\n<div class="item mr-400 ml-400">\n<div class="diamond-container">\n  <div class="diamond">\n    <div class="diamond-wrapper">\n      <div class="diamond-content">${n.price}$</div>\n    </div>\n  </div>\n</div>\n<div class="item-wrapper">\n  <div class="content-wrapper">\n    <div class="img-container">\n      <div class="bg-square"></div>\n      <img class="item-img" src="${n.image}" />\n    </div>\n    <div class="content-text">\n    <div class="item-name">${n.title}</div>\n    <div class="item-subtext-container">\n    <span class="item-subtext subtext-mfr">Rating: ${n.rating.rate}</span>\n    </div>\n    </div>\n  </div>\n  <div class="view-more-btn">\n  <div class="actions p-300">\n      <div class="like">\n        <img class="hit-like" data-liked="${n.id}" width="20" height="20" src="./images/hearth-icon.svg" alt="hearth-icon">\n        <p><b>${r}</b> like</p>\n      </div>\n      <div class="comment">\n        <img class="hit-comment" data-display="${n.id}" width="20" height="20" src="./images/comment-icon.svg" alt="comment icon">\n        <p><b>${e}</b> comment</p>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n`;function g(n,r){return function(){return n.apply(r,arguments)}}const{toString:C}=Object.prototype,{getPrototypeOf:B}=Object,b=(v=Object.create(null),n=>{const r=C.call(n);return v[r]||(v[r]=r.slice(8,-1).toLowerCase())});var v;const y=n=>(n=n.toLowerCase(),r=>b(r)===n),w=n=>r=>typeof r===n,{isArray:x}=Array,k=w("undefined"),S=y("ArrayBuffer"),O=w("string"),R=w("function"),z=w("number"),T=n=>null!==n&&"object"==typeof n,j=n=>{if("object"!==b(n))return!1;const r=B(n);return!(null!==r&&r!==Object.prototype&&null!==Object.getPrototypeOf(r)||Symbol.toStringTag in n||Symbol.iterator in n)},L=y("Date"),N=y("File"),U=y("Blob"),P=y("FileList"),D=y("URLSearchParams");function _(n,r,{allOwnKeys:e=!1}={}){if(null==n)return;let t,o;if("object"!=typeof n&&(n=[n]),x(n))for(t=0,o=n.length;t<o;t++)r.call(null,n[t],t,n);else{const o=e?Object.getOwnPropertyNames(n):Object.keys(n),i=o.length;let s;for(t=0;t<i;t++)s=o[t],r.call(null,n[s],s,n)}}const q=(F="undefined"!=typeof Uint8Array&&B(Uint8Array),n=>F&&n instanceof F);var F;const I=y("HTMLFormElement"),M=(({hasOwnProperty:n})=>(r,e)=>n.call(r,e))(Object.prototype),$=y("RegExp"),Y=(n,r)=>{const e=Object.getOwnPropertyDescriptors(n),t={};_(e,((e,o)=>{!1!==r(e,o,n)&&(t[o]=e)})),Object.defineProperties(n,t)},W={isArray:x,isArrayBuffer:S,isBuffer:function(n){return null!==n&&!k(n)&&null!==n.constructor&&!k(n.constructor)&&R(n.constructor.isBuffer)&&n.constructor.isBuffer(n)},isFormData:n=>{const r="[object FormData]";return n&&("function"==typeof FormData&&n instanceof FormData||C.call(n)===r||R(n.toString)&&n.toString()===r)},isArrayBufferView:function(n){let r;return r="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(n):n&&n.buffer&&S(n.buffer),r},isString:O,isNumber:z,isBoolean:n=>!0===n||!1===n,isObject:T,isPlainObject:j,isUndefined:k,isDate:L,isFile:N,isBlob:U,isRegExp:$,isFunction:R,isStream:n=>T(n)&&R(n.pipe),isURLSearchParams:D,isTypedArray:q,isFileList:P,forEach:_,merge:function n(){const r={},e=(e,t)=>{j(r[t])&&j(e)?r[t]=n(r[t],e):j(e)?r[t]=n({},e):x(e)?r[t]=e.slice():r[t]=e};for(let n=0,r=arguments.length;n<r;n++)arguments[n]&&_(arguments[n],e);return r},extend:(n,r,e,{allOwnKeys:t}={})=>(_(r,((r,t)=>{e&&R(r)?n[t]=g(r,e):n[t]=r}),{allOwnKeys:t}),n),trim:n=>n.trim?n.trim():n.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:n=>(65279===n.charCodeAt(0)&&(n=n.slice(1)),n),inherits:(n,r,e,t)=>{n.prototype=Object.create(r.prototype,t),n.prototype.constructor=n,Object.defineProperty(n,"super",{value:r.prototype}),e&&Object.assign(n.prototype,e)},toFlatObject:(n,r,e,t)=>{let o,i,s;const a={};if(r=r||{},null==n)return r;do{for(o=Object.getOwnPropertyNames(n),i=o.length;i-- >0;)s=o[i],t&&!t(s,n,r)||a[s]||(r[s]=n[s],a[s]=!0);n=!1!==e&&B(n)}while(n&&(!e||e(n,r))&&n!==Object.prototype);return r},kindOf:b,kindOfTest:y,endsWith:(n,r,e)=>{n=String(n),(void 0===e||e>n.length)&&(e=n.length),e-=r.length;const t=n.indexOf(r,e);return-1!==t&&t===e},toArray:n=>{if(!n)return null;if(x(n))return n;let r=n.length;if(!z(r))return null;const e=new Array(r);for(;r-- >0;)e[r]=n[r];return e},forEachEntry:(n,r)=>{const e=(n&&n[Symbol.iterator]).call(n);let t;for(;(t=e.next())&&!t.done;){const e=t.value;r.call(n,e[0],e[1])}},matchAll:(n,r)=>{let e;const t=[];for(;null!==(e=n.exec(r));)t.push(e);return t},isHTMLForm:I,hasOwnProperty:M,hasOwnProp:M,reduceDescriptors:Y,freezeMethods:n=>{Y(n,((r,e)=>{const t=n[e];R(t)&&(r.enumerable=!1,"writable"in r?r.writable=!1:r.set||(r.set=()=>{throw Error("Can not read-only method '"+e+"'")}))}))},toObjectSet:(n,r)=>{const e={},t=n=>{n.forEach((n=>{e[n]=!0}))};return x(n)?t(n):t(String(n).split(r)),e},toCamelCase:n=>n.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,(function(n,r,e){return r.toUpperCase()+e})),noop:()=>{},toFiniteNumber:(n,r)=>(n=+n,Number.isFinite(n)?n:r)};function V(n,r,e,t,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=n,this.name="AxiosError",r&&(this.code=r),e&&(this.config=e),t&&(this.request=t),o&&(this.response=o)}W.inherits(V,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const H=V.prototype,J={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((n=>{J[n]={value:n}})),Object.defineProperties(V,J),Object.defineProperty(H,"isAxiosError",{value:!0}),V.from=(n,r,e,t,o,i)=>{const s=Object.create(H);return W.toFlatObject(n,s,(function(n){return n!==Error.prototype}),(n=>"isAxiosError"!==n)),V.call(s,n.message,r,e,t,o),s.cause=n,s.name=n.name,i&&Object.assign(s,i),s};const X=V,Z=e(230);function K(n){return W.isPlainObject(n)||W.isArray(n)}function Q(n){return W.endsWith(n,"[]")?n.slice(0,-2):n}function G(n,r,e){return n?n.concat(r).map((function(n,r){return n=Q(n),!e&&r?"["+n+"]":n})).join(e?".":""):r}const nn=W.toFlatObject(W,{},null,(function(n){return/^is[A-Z]/.test(n)})),rn=function(n,r,e){if(!W.isObject(n))throw new TypeError("target must be an object");r=r||new(Z||FormData);const t=(e=W.toFlatObject(e,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(n,r){return!W.isUndefined(r[n])}))).metaTokens,o=e.visitor||l,i=e.dots,s=e.indexes,a=(e.Blob||"undefined"!=typeof Blob&&Blob)&&(A=r)&&W.isFunction(A.append)&&"FormData"===A[Symbol.toStringTag]&&A[Symbol.iterator];var A;if(!W.isFunction(o))throw new TypeError("visitor must be a function");function c(n){if(null===n)return"";if(W.isDate(n))return n.toISOString();if(!a&&W.isBlob(n))throw new X("Blob is not supported. Use a Buffer instead.");return W.isArrayBuffer(n)||W.isTypedArray(n)?a&&"function"==typeof Blob?new Blob([n]):Buffer.from(n):n}function l(n,e,o){let a=n;if(n&&!o&&"object"==typeof n)if(W.endsWith(e,"{}"))e=t?e:e.slice(0,-2),n=JSON.stringify(n);else if(W.isArray(n)&&function(n){return W.isArray(n)&&!n.some(K)}(n)||W.isFileList(n)||W.endsWith(e,"[]")&&(a=W.toArray(n)))return e=Q(e),a.forEach((function(n,t){!W.isUndefined(n)&&null!==n&&r.append(!0===s?G([e],t,i):null===s?e:e+"[]",c(n))})),!1;return!!K(n)||(r.append(G(o,e,i),c(n)),!1)}const u=[],d=Object.assign(nn,{defaultVisitor:l,convertValue:c,isVisitable:K});if(!W.isObject(n))throw new TypeError("data must be an object");return function n(e,t){if(!W.isUndefined(e)){if(-1!==u.indexOf(e))throw Error("Circular reference detected in "+t.join("."));u.push(e),W.forEach(e,(function(e,i){!0===(!(W.isUndefined(e)||null===e)&&o.call(r,e,W.isString(i)?i.trim():i,t,d))&&n(e,t?t.concat(i):[i])})),u.pop()}}(n),r};function en(n){const r={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(n).replace(/[!'()~]|%20|%00/g,(function(n){return r[n]}))}function tn(n,r){this._pairs=[],n&&rn(n,this,r)}const on=tn.prototype;on.append=function(n,r){this._pairs.push([n,r])},on.toString=function(n){const r=n?function(r){return n.call(this,r,en)}:en;return this._pairs.map((function(n){return r(n[0])+"="+r(n[1])}),"").join("&")};const sn=tn;function an(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function An(n,r,e){if(!r)return n;const t=e&&e.encode||an,o=e&&e.serialize;let i;if(i=o?o(r,e):W.isURLSearchParams(r)?r.toString():new sn(r,e).toString(t),i){const r=n.indexOf("#");-1!==r&&(n=n.slice(0,r)),n+=(-1===n.indexOf("?")?"?":"&")+i}return n}const cn=class{constructor(){this.handlers=[]}use(n,r,e){return this.handlers.push({fulfilled:n,rejected:r,synchronous:!!e&&e.synchronous,runWhen:e?e.runWhen:null}),this.handlers.length-1}eject(n){this.handlers[n]&&(this.handlers[n]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(n){W.forEach(this.handlers,(function(r){null!==r&&n(r)}))}},ln={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},un="undefined"!=typeof URLSearchParams?URLSearchParams:sn,dn=FormData,pn=(()=>{let n;return("undefined"==typeof navigator||"ReactNative"!==(n=navigator.product)&&"NativeScript"!==n&&"NS"!==n)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),mn={isBrowser:!0,classes:{URLSearchParams:un,FormData:dn,Blob},isStandardBrowserEnv:pn,protocols:["http","https","file","blob","url","data"]},fn=function(n){function r(n,e,t,o){let i=n[o++];const s=Number.isFinite(+i),a=o>=n.length;return i=!i&&W.isArray(t)?t.length:i,a?(W.hasOwnProp(t,i)?t[i]=[t[i],e]:t[i]=e,!s):(t[i]&&W.isObject(t[i])||(t[i]=[]),r(n,e,t[i],o)&&W.isArray(t[i])&&(t[i]=function(n){const r={},e=Object.keys(n);let t;const o=e.length;let i;for(t=0;t<o;t++)i=e[t],r[i]=n[i];return r}(t[i])),!s)}if(W.isFormData(n)&&W.isFunction(n.entries)){const e={};return W.forEachEntry(n,((n,t)=>{r(function(n){return W.matchAll(/\w+|\[(\w*)]/g,n).map((n=>"[]"===n[0]?"":n[1]||n[0]))}(n),t,e,0)})),e}return null},hn=mn.isStandardBrowserEnv?{write:function(n,r,e,t,o,i){const s=[];s.push(n+"="+encodeURIComponent(r)),W.isNumber(e)&&s.push("expires="+new Date(e).toGMTString()),W.isString(t)&&s.push("path="+t),W.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(n){const r=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function En(n,r){return n&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(r)?function(n,r){return r?n.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):n}(n,r):r}const gn=mn.isStandardBrowserEnv?function(){const n=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");let e;function t(e){let t=e;return n&&(r.setAttribute("href",t),t=r.href),r.setAttribute("href",t),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=t(window.location.href),function(n){const r=W.isString(n)?t(n):n;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0};function Cn(n,r,e){X.call(this,null==n?"canceled":n,X.ERR_CANCELED,r,e),this.name="CanceledError"}W.inherits(Cn,X,{__CANCEL__:!0});const Bn=Cn,bn=W.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),vn=Symbol("internals"),yn=Symbol("defaults");function wn(n){return n&&String(n).trim().toLowerCase()}function xn(n){return!1===n||null==n?n:W.isArray(n)?n.map(xn):String(n)}function kn(n,r,e,t){return W.isFunction(t)?t.call(this,r,e):W.isString(r)?W.isString(t)?-1!==r.indexOf(t):W.isRegExp(t)?t.test(r):void 0:void 0}function Sn(n,r){r=r.toLowerCase();const e=Object.keys(n);let t,o=e.length;for(;o-- >0;)if(t=e[o],r===t.toLowerCase())return t;return null}function On(n,r){n&&this.set(n),this[yn]=r||null}Object.assign(On.prototype,{set:function(n,r,e){const t=this;function o(n,r,e){const o=wn(r);if(!o)throw new Error("header name must be a non-empty string");const i=Sn(t,o);(!i||!0===e||!1!==t[i]&&!1!==e)&&(t[i||r]=xn(n))}return W.isPlainObject(n)?W.forEach(n,((n,e)=>{o(n,e,r)})):o(r,n,e),this},get:function(n,r){if(!(n=wn(n)))return;const e=Sn(this,n);if(e){const n=this[e];if(!r)return n;if(!0===r)return function(n){const r=Object.create(null),e=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let t;for(;t=e.exec(n);)r[t[1]]=t[2];return r}(n);if(W.isFunction(r))return r.call(this,n,e);if(W.isRegExp(r))return r.exec(n);throw new TypeError("parser must be boolean|regexp|function")}},has:function(n,r){if(n=wn(n)){const e=Sn(this,n);return!(!e||r&&!kn(0,this[e],e,r))}return!1},delete:function(n,r){const e=this;let t=!1;function o(n){if(n=wn(n)){const o=Sn(e,n);!o||r&&!kn(0,e[o],o,r)||(delete e[o],t=!0)}}return W.isArray(n)?n.forEach(o):o(n),t},clear:function(){return Object.keys(this).forEach(this.delete.bind(this))},normalize:function(n){const r=this,e={};return W.forEach(this,((t,o)=>{const i=Sn(e,o);if(i)return r[i]=xn(t),void delete r[o];const s=n?function(n){return n.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((n,r,e)=>r.toUpperCase()+e))}(o):String(o).trim();s!==o&&delete r[o],r[s]=xn(t),e[s]=!0})),this},toJSON:function(n){const r=Object.create(null);return W.forEach(Object.assign({},this[yn]||null,this),((e,t)=>{null!=e&&!1!==e&&(r[t]=n&&W.isArray(e)?e.join(", "):e)})),r}}),Object.assign(On,{from:function(n){return W.isString(n)?new this((n=>{const r={};let e,t,o;return n&&n.split("\n").forEach((function(n){o=n.indexOf(":"),e=n.substring(0,o).trim().toLowerCase(),t=n.substring(o+1).trim(),!e||r[e]&&bn[e]||("set-cookie"===e?r[e]?r[e].push(t):r[e]=[t]:r[e]=r[e]?r[e]+", "+t:t)})),r})(n)):n instanceof this?n:new this(n)},accessor:function(n){const r=(this[vn]=this[vn]={accessors:{}}).accessors,e=this.prototype;function t(n){const t=wn(n);r[t]||(function(n,r){const e=W.toCamelCase(" "+r);["get","set","has"].forEach((t=>{Object.defineProperty(n,t+e,{value:function(n,e,o){return this[t].call(this,r,n,e,o)},configurable:!0})}))}(e,n),r[t]=!0)}return W.isArray(n)?n.forEach(t):t(n),this}}),On.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent"]),W.freezeMethods(On.prototype),W.freezeMethods(On);const Rn=On;function zn(n,r){let e=0;const t=function(n,r){n=n||10;const e=new Array(n),t=new Array(n);let o,i=0,s=0;return r=void 0!==r?r:1e3,function(a){const A=Date.now(),c=t[s];o||(o=A),e[i]=a,t[i]=A;let l=s,u=0;for(;l!==i;)u+=e[l++],l%=n;if(i=(i+1)%n,i===s&&(s=(s+1)%n),A-o<r)return;const d=c&&A-c;return d?Math.round(1e3*u/d):void 0}}(50,250);return o=>{const i=o.loaded,s=o.lengthComputable?o.total:void 0,a=i-e,A=t(a);e=i;const c={loaded:i,total:s,progress:s?i/s:void 0,bytes:a,rate:A||void 0,estimated:A&&s&&i<=s?(s-i)/A:void 0};c[r?"download":"upload"]=!0,n(c)}}function Tn(n){return new Promise((function(r,e){let t=n.data;const o=Rn.from(n.headers).normalize(),i=n.responseType;let s;function a(){n.cancelToken&&n.cancelToken.unsubscribe(s),n.signal&&n.signal.removeEventListener("abort",s)}W.isFormData(t)&&mn.isStandardBrowserEnv&&o.setContentType(!1);let A=new XMLHttpRequest;if(n.auth){const r=n.auth.username||"",e=n.auth.password?unescape(encodeURIComponent(n.auth.password)):"";o.set("Authorization","Basic "+btoa(r+":"+e))}const c=En(n.baseURL,n.url);function l(){if(!A)return;const t=Rn.from("getAllResponseHeaders"in A&&A.getAllResponseHeaders());!function(n,r,e){const t=e.config.validateStatus;e.status&&t&&!t(e.status)?r(new X("Request failed with status code "+e.status,[X.ERR_BAD_REQUEST,X.ERR_BAD_RESPONSE][Math.floor(e.status/100)-4],e.config,e.request,e)):n(e)}((function(n){r(n),a()}),(function(n){e(n),a()}),{data:i&&"text"!==i&&"json"!==i?A.response:A.responseText,status:A.status,statusText:A.statusText,headers:t,config:n,request:A}),A=null}if(A.open(n.method.toUpperCase(),An(c,n.params,n.paramsSerializer),!0),A.timeout=n.timeout,"onloadend"in A?A.onloadend=l:A.onreadystatechange=function(){A&&4===A.readyState&&(0!==A.status||A.responseURL&&0===A.responseURL.indexOf("file:"))&&setTimeout(l)},A.onabort=function(){A&&(e(new X("Request aborted",X.ECONNABORTED,n,A)),A=null)},A.onerror=function(){e(new X("Network Error",X.ERR_NETWORK,n,A)),A=null},A.ontimeout=function(){let r=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded";const t=n.transitional||ln;n.timeoutErrorMessage&&(r=n.timeoutErrorMessage),e(new X(r,t.clarifyTimeoutError?X.ETIMEDOUT:X.ECONNABORTED,n,A)),A=null},mn.isStandardBrowserEnv){const r=(n.withCredentials||gn(c))&&n.xsrfCookieName&&hn.read(n.xsrfCookieName);r&&o.set(n.xsrfHeaderName,r)}void 0===t&&o.setContentType(null),"setRequestHeader"in A&&W.forEach(o.toJSON(),(function(n,r){A.setRequestHeader(r,n)})),W.isUndefined(n.withCredentials)||(A.withCredentials=!!n.withCredentials),i&&"json"!==i&&(A.responseType=n.responseType),"function"==typeof n.onDownloadProgress&&A.addEventListener("progress",zn(n.onDownloadProgress,!0)),"function"==typeof n.onUploadProgress&&A.upload&&A.upload.addEventListener("progress",zn(n.onUploadProgress)),(n.cancelToken||n.signal)&&(s=r=>{A&&(e(!r||r.type?new Bn(null,n,A):r),A.abort(),A=null)},n.cancelToken&&n.cancelToken.subscribe(s),n.signal&&(n.signal.aborted?s():n.signal.addEventListener("abort",s)));const u=function(n){const r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(n);return r&&r[1]||""}(c);u&&-1===mn.protocols.indexOf(u)?e(new X("Unsupported protocol "+u+":",X.ERR_BAD_REQUEST,n)):A.send(t||null)}))}const jn={http:Tn,xhr:Tn},Ln=n=>{if(W.isString(n)){const r=jn[n];if(!n)throw Error(W.hasOwnProp(n)?`Adapter '${n}' is not available in the build`:`Can not resolve adapter '${n}'`);return r}if(!W.isFunction(n))throw new TypeError("adapter is not a function");return n},Nn={"Content-Type":"application/x-www-form-urlencoded"},Un={transitional:ln,adapter:function(){let n;return"undefined"!=typeof XMLHttpRequest?n=Ln("xhr"):"undefined"!=typeof process&&"process"===W.kindOf(process)&&(n=Ln("http")),n}(),transformRequest:[function(n,r){const e=r.getContentType()||"",t=e.indexOf("application/json")>-1,o=W.isObject(n);if(o&&W.isHTMLForm(n)&&(n=new FormData(n)),W.isFormData(n))return t&&t?JSON.stringify(fn(n)):n;if(W.isArrayBuffer(n)||W.isBuffer(n)||W.isStream(n)||W.isFile(n)||W.isBlob(n))return n;if(W.isArrayBufferView(n))return n.buffer;if(W.isURLSearchParams(n))return r.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),n.toString();let i;if(o){if(e.indexOf("application/x-www-form-urlencoded")>-1)return function(n,r){return rn(n,new mn.classes.URLSearchParams,Object.assign({visitor:function(n,r,e,t){return mn.isNode&&W.isBuffer(n)?(this.append(r,n.toString("base64")),!1):t.defaultVisitor.apply(this,arguments)}},r))}(n,this.formSerializer).toString();if((i=W.isFileList(n))||e.indexOf("multipart/form-data")>-1){const r=this.env&&this.env.FormData;return rn(i?{"files[]":n}:n,r&&new r,this.formSerializer)}}return o||t?(r.setContentType("application/json",!1),function(n,r,e){if(W.isString(n))try{return(0,JSON.parse)(n),W.trim(n)}catch(n){if("SyntaxError"!==n.name)throw n}return(0,JSON.stringify)(n)}(n)):n}],transformResponse:[function(n){const r=this.transitional||Un.transitional,e=r&&r.forcedJSONParsing,t="json"===this.responseType;if(n&&W.isString(n)&&(e&&!this.responseType||t)){const e=!(r&&r.silentJSONParsing)&&t;try{return JSON.parse(n)}catch(n){if(e){if("SyntaxError"===n.name)throw X.from(n,X.ERR_BAD_RESPONSE,this,null,this.response);throw n}}}return n}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:mn.classes.FormData,Blob:mn.classes.Blob},validateStatus:function(n){return n>=200&&n<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};W.forEach(["delete","get","head"],(function(n){Un.headers[n]={}})),W.forEach(["post","put","patch"],(function(n){Un.headers[n]=W.merge(Nn)}));const Pn=Un;function Dn(n,r){const e=this||Pn,t=r||e,o=Rn.from(t.headers);let i=t.data;return W.forEach(n,(function(n){i=n.call(e,i,o.normalize(),r?r.status:void 0)})),o.normalize(),i}function _n(n){return!(!n||!n.__CANCEL__)}function qn(n){if(n.cancelToken&&n.cancelToken.throwIfRequested(),n.signal&&n.signal.aborted)throw new Bn}function Fn(n){return qn(n),n.headers=Rn.from(n.headers),n.data=Dn.call(n,n.transformRequest),(n.adapter||Pn.adapter)(n).then((function(r){return qn(n),r.data=Dn.call(n,n.transformResponse,r),r.headers=Rn.from(r.headers),r}),(function(r){return _n(r)||(qn(n),r&&r.response&&(r.response.data=Dn.call(n,n.transformResponse,r.response),r.response.headers=Rn.from(r.response.headers))),Promise.reject(r)}))}function In(n,r){r=r||{};const e={};function t(n,r){return W.isPlainObject(n)&&W.isPlainObject(r)?W.merge(n,r):W.isPlainObject(r)?W.merge({},r):W.isArray(r)?r.slice():r}function o(e){return W.isUndefined(r[e])?W.isUndefined(n[e])?void 0:t(void 0,n[e]):t(n[e],r[e])}function i(n){if(!W.isUndefined(r[n]))return t(void 0,r[n])}function s(e){return W.isUndefined(r[e])?W.isUndefined(n[e])?void 0:t(void 0,n[e]):t(void 0,r[e])}function a(e){return e in r?t(n[e],r[e]):e in n?t(void 0,n[e]):void 0}const A={url:i,method:i,data:i,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a};return W.forEach(Object.keys(n).concat(Object.keys(r)),(function(n){const r=A[n]||o,t=r(n);W.isUndefined(t)&&r!==a||(e[n]=t)})),e}const Mn={};["object","boolean","number","function","string","symbol"].forEach(((n,r)=>{Mn[n]=function(e){return typeof e===n||"a"+(r<1?"n ":" ")+n}}));const $n={};Mn.transitional=function(n,r,e){function t(n,r){return"[Axios v1.1.3] Transitional option '"+n+"'"+r+(e?". "+e:"")}return(e,o,i)=>{if(!1===n)throw new X(t(o," has been removed"+(r?" in "+r:"")),X.ERR_DEPRECATED);return r&&!$n[o]&&($n[o]=!0,console.warn(t(o," has been deprecated since v"+r+" and will be removed in the near future"))),!n||n(e,o,i)}};const Yn={assertOptions:function(n,r,e){if("object"!=typeof n)throw new X("options must be an object",X.ERR_BAD_OPTION_VALUE);const t=Object.keys(n);let o=t.length;for(;o-- >0;){const i=t[o],s=r[i];if(s){const r=n[i],e=void 0===r||s(r,i,n);if(!0!==e)throw new X("option "+i+" must be "+e,X.ERR_BAD_OPTION_VALUE)}else if(!0!==e)throw new X("Unknown option "+i,X.ERR_BAD_OPTION)}},validators:Mn},Wn=Yn.validators;class Vn{constructor(n){this.defaults=n,this.interceptors={request:new cn,response:new cn}}request(n,r){"string"==typeof n?(r=r||{}).url=n:r=n||{},r=In(this.defaults,r);const{transitional:e,paramsSerializer:t}=r;void 0!==e&&Yn.assertOptions(e,{silentJSONParsing:Wn.transitional(Wn.boolean),forcedJSONParsing:Wn.transitional(Wn.boolean),clarifyTimeoutError:Wn.transitional(Wn.boolean)},!1),void 0!==t&&Yn.assertOptions(t,{encode:Wn.function,serialize:Wn.function},!0),r.method=(r.method||this.defaults.method||"get").toLowerCase();const o=r.headers&&W.merge(r.headers.common,r.headers[r.method]);o&&W.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete r.headers[n]})),r.headers=new Rn(r.headers,o);const i=[];let s=!0;this.interceptors.request.forEach((function(n){"function"==typeof n.runWhen&&!1===n.runWhen(r)||(s=s&&n.synchronous,i.unshift(n.fulfilled,n.rejected))}));const a=[];let A;this.interceptors.response.forEach((function(n){a.push(n.fulfilled,n.rejected)}));let c,l=0;if(!s){const n=[Fn.bind(this),void 0];for(n.unshift.apply(n,i),n.push.apply(n,a),c=n.length,A=Promise.resolve(r);l<c;)A=A.then(n[l++],n[l++]);return A}c=i.length;let u=r;for(l=0;l<c;){const n=i[l++],r=i[l++];try{u=n(u)}catch(n){r.call(this,n);break}}try{A=Fn.call(this,u)}catch(n){return Promise.reject(n)}for(l=0,c=a.length;l<c;)A=A.then(a[l++],a[l++]);return A}getUri(n){return An(En((n=In(this.defaults,n)).baseURL,n.url),n.params,n.paramsSerializer)}}W.forEach(["delete","get","head","options"],(function(n){Vn.prototype[n]=function(r,e){return this.request(In(e||{},{method:n,url:r,data:(e||{}).data}))}})),W.forEach(["post","put","patch"],(function(n){function r(r){return function(e,t,o){return this.request(In(o||{},{method:n,headers:r?{"Content-Type":"multipart/form-data"}:{},url:e,data:t}))}}Vn.prototype[n]=r(),Vn.prototype[n+"Form"]=r(!0)}));const Hn=Vn;class Jn{constructor(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");let r;this.promise=new Promise((function(n){r=n}));const e=this;this.promise.then((n=>{if(!e._listeners)return;let r=e._listeners.length;for(;r-- >0;)e._listeners[r](n);e._listeners=null})),this.promise.then=n=>{let r;const t=new Promise((n=>{e.subscribe(n),r=n})).then(n);return t.cancel=function(){e.unsubscribe(r)},t},n((function(n,t,o){e.reason||(e.reason=new Bn(n,t,o),r(e.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(n){this.reason?n(this.reason):this._listeners?this._listeners.push(n):this._listeners=[n]}unsubscribe(n){if(!this._listeners)return;const r=this._listeners.indexOf(n);-1!==r&&this._listeners.splice(r,1)}static source(){let n;return{token:new Jn((function(r){n=r})),cancel:n}}}const Xn=Jn,Zn=function n(r){const e=new Hn(r),t=g(Hn.prototype.request,e);return W.extend(t,Hn.prototype,e,{allOwnKeys:!0}),W.extend(t,e,null,{allOwnKeys:!0}),t.create=function(e){return n(In(r,e))},t}(Pn);Zn.Axios=Hn,Zn.CanceledError=Bn,Zn.CancelToken=Xn,Zn.isCancel=_n,Zn.VERSION="1.1.3",Zn.toFormData=rn,Zn.AxiosError=X,Zn.Cancel=Zn.CanceledError,Zn.all=function(n){return Promise.all(n)},Zn.spread=function(n){return function(r){return n.apply(null,r)}},Zn.isAxiosError=function(n){return W.isObject(n)&&!0===n.isAxiosError},Zn.formToJSON=n=>fn(W.isHTMLForm(n)?new FormData(n):n);const Kn=Zn,{Axios:Qn,AxiosError:Gn,CanceledError:nr,isCancel:rr,CancelToken:er,VERSION:tr,all:or,Cancel:ir,isAxiosError:sr,spread:ar,toFormData:Ar}=Kn,cr=Kn;class lr{constructor(){this.involvementURL="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/",this.appID="XuUh3fcKVDAPOoTxKraP"}async getLikes(){const n=await fetch(`${this.involvementURL}${this.appID}/likes/`);return await n.json()}async setLike(n){return await cr.post(`${this.involvementURL}${this.appID}/likes/`,{item_id:n})}}const ur=(n,r,e)=>`<div class="popup-container">\n<div class="popup-info">\n<img width="20" height="20" class="popup-close" src="./images/icon-close.svg" alt="close icon">\n<div class="prod-detail">\n  <div class="image-container">\n    <img class="prod-img" src="${n.image}" alt="product image">\n  </div>\n  <div class="pt-500">\n    <div class="description">\n      <h4 class="text-orange">Clara Store</h4>\n      <h3 class="secondary-heading text-very-dark-blue mb-200">${n.title}</h3>\n      <p class="text-grayish-blue prod-desc mb-300">\n        ${n.description}.\n      </p>\n      <p class="product-price"> $${n.price}</p>\n    </div>\n  </div>\n</div>\n<div class="prod-comments">\n  <div class="comment-list">\n    <h3 class='comments-counters '>Comments (<span class="counter">${e>0?e:0}</span>) </h3>\n    <ul class="comments-container border mt-100">\n      ${r}\n    </ul>\n  </div>\n  <div class="add-comment-section">\n    <div class="add-comment">\n      <h3 class="comments-counters">Add Your Comment</h3>\n    </div>\n    <form class="form-comments border p-300 mt-100">\n        <input type="text" name="name" aria-label="user name" class="name p-200" placeholder="Your name" required>\n          <textarea name="description" aria-label="user message" class="message p-200" cols="30" rows="5"\n            placeholder="Your insight..." required></textarea>\n          <button id=${n.id} type="submit" class="submit input p-200">Comment</button>\n    </form>\n  </div>\n</div>\n</div>\n</div>`,dr=n=>{let r="";return Array.isArray(n)&&n.forEach(((n,e)=>{r+=`<li>${e+1} - ${n.username} - ${n.comment} - ${n.creation_date}</li>`})),r};class pr{constructor(){this.involvementURL="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/",this.appID="XuUh3fcKVDAPOoTxKraP"}async getComments(n){const r=await fetch(`${this.involvementURL}${this.appID}/comments?item_id=${n}`);return await r.json()}async setComment(n,r,e){return await cr.post(`${this.involvementURL}${this.appID}/comments/`,{item_id:n,username:r,comment:e})}}const mr=(n,r)=>{const e=n.filter((n=>n.item_id===r?n:0));return e.length>0?e[0].likes:0};let fr=[],hr=[];const Er=()=>{const n=document.querySelector(".show-popup");document.querySelector(".popup-close").addEventListener("click",(()=>{n.style.display="none"}))},gr=()=>{const n=document.querySelectorAll(".hit-comment"),r=document.querySelector(".show-popup");n.forEach((n=>{n.addEventListener("click",(async n=>{r.style.display="block";const e=n.target.getAttribute("data-display"),t=fr[e-1],o=new pr,i=await o.getComments(t.id),s=dr(i);r.innerHTML=ur(t,s,i.length),Er();const a=document.querySelector(".submit"),A=document.querySelector(".name"),c=document.querySelector(".message");a.addEventListener("click",(async n=>{n.preventDefault();const o=new pr;o.setComment(e,A.value,c.value).then((async()=>{const n=await o.getComments(t.id),e=dr(n);r.innerHTML=ur(t,e,n.length),Er()}))}))}))}))},Cr=async(n=0)=>{const r=6*n,e=document.querySelector("#app");let t=6*n+6,o='<div class="product-container pt-500 pb-500 m-300">';t>fr.length&&(t=fr.length);for(let n=r;n<t;n+=1){const r=mr(hr,fr[n].id);o+=E(fr[n],r,Math.floor(20*Math.random()))}o+="</div>",o+=(n=>`\n <ul class='pagination'>\n     <li><a class='page-item' data-index='0'>&laquo;</a></li>\n     <li><a class='page-item ${0===n?"active":""}' data-index='0'>1</a></li>\n     <li><a class='page-item ${1===n?"active":""}' data-index='1'>2</a></li>\n     <li><a class='page-item ${2===n?"active":""}' data-index='2'>3</a></li>\n     <li><a class='page-item ${3===n?"active":""}' data-index='3'>4</a></li>\n     <li><a class='page-item' data-index='3'>&raquo;</a></li>\n   <ul>\n `)(n),e.innerHTML=o,document.querySelectorAll(".page-item").forEach((n=>{n.addEventListener("click",(n=>{Cr(Number(n.target.getAttribute("data-index")))}))})),document.querySelectorAll(".hit-like").forEach((n=>{n.addEventListener("click",(n=>{const r=n.target;r.src="./images/red-hearth.svg",(new lr).setLike(Number(r.getAttribute("data-liked"))).then((()=>{const n=r.nextElementSibling.firstChild,e=Number(n.innerHTML);n.innerHTML=e+1}))}))})),gr()};window.addEventListener("load",(()=>{gr(),(new lr).getLikes().then((n=>{hr=n,(async()=>{const n=await fetch("https://fakestoreapi.com/products");return await n.json()})().then((n=>{fr=n,document.querySelector("#pCount").innerHTML=fr.length,Cr()}))}))}))}},n=>{n(n.s=324)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,